//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Paddle2"",
            ""id"": ""3812a05f-b8af-411d-9b3f-28e44b42eae6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a1e2a42e-a665-40bd-80dd-4822fffc6dc6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1c65465a-2efa-4598-a038-5be0c98fbfb7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9eb4246e-ca44-4cbc-a916-3a4809d485a2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c09ba592-68a7-40f3-a43d-c7fba44fd5e5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Paddle1"",
            ""id"": ""03e336c8-e3e0-473f-825a-efa2c254ae4c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7c838894-b57a-43bf-bb99-858ec1db219e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""14096f4e-3edd-4d9d-83b2-af8b632ae43a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0def3c9e-4df5-4ae8-965f-e26ddaab95e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ff1106a0-5f74-4dd9-ba0d-27514840bcf7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""c116b649-88f5-423e-bae6-bb041bba0026"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""53659e5f-7530-4cb5-9c4a-ab08d4d6cfc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""70f6a901-64ec-4a8e-a189-64aa5bf3dade"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59c5cb79-37f1-418f-93a5-d2944bf1122c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8f26477-00c3-443f-a238-7ef0915a204d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Paddle2
        m_Paddle2 = asset.FindActionMap("Paddle2", throwIfNotFound: true);
        m_Paddle2_Move = m_Paddle2.FindAction("Move", throwIfNotFound: true);
        // Paddle1
        m_Paddle1 = asset.FindActionMap("Paddle1", throwIfNotFound: true);
        m_Paddle1_Move = m_Paddle1.FindAction("Move", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Start = m_Game.FindAction("Start", throwIfNotFound: true);
        m_Game_Menu = m_Game.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Paddle2
    private readonly InputActionMap m_Paddle2;
    private IPaddle2Actions m_Paddle2ActionsCallbackInterface;
    private readonly InputAction m_Paddle2_Move;
    public struct Paddle2Actions
    {
        private @InputActions m_Wrapper;
        public Paddle2Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Paddle2_Move;
        public InputActionMap Get() { return m_Wrapper.m_Paddle2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Paddle2Actions set) { return set.Get(); }
        public void SetCallbacks(IPaddle2Actions instance)
        {
            if (m_Wrapper.m_Paddle2ActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Paddle2ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Paddle2ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Paddle2ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Paddle2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Paddle2Actions @Paddle2 => new Paddle2Actions(this);

    // Paddle1
    private readonly InputActionMap m_Paddle1;
    private IPaddle1Actions m_Paddle1ActionsCallbackInterface;
    private readonly InputAction m_Paddle1_Move;
    public struct Paddle1Actions
    {
        private @InputActions m_Wrapper;
        public Paddle1Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Paddle1_Move;
        public InputActionMap Get() { return m_Wrapper.m_Paddle1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Paddle1Actions set) { return set.Get(); }
        public void SetCallbacks(IPaddle1Actions instance)
        {
            if (m_Wrapper.m_Paddle1ActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Paddle1ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Paddle1ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Paddle1ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Paddle1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Paddle1Actions @Paddle1 => new Paddle1Actions(this);

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_Start;
    private readonly InputAction m_Game_Menu;
    public struct GameActions
    {
        private @InputActions m_Wrapper;
        public GameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_Game_Start;
        public InputAction @Menu => m_Wrapper.m_Game_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_GameActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnStart;
                @Menu.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IPaddle2Actions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPaddle1Actions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnStart(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
